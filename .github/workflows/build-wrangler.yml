name: Notebook Wrangler Build
on:
   push:
      branches:
        - main
      paths:
        - "nbw-spec-archive/**"
   workflow_dispatch:
jobs:
  docker:
    name: Notebook Wrangler Build Image
    runs-on: ubuntu-24.04
    permissions:
        packages: write

    steps:

      - name: Free Disk Space,  Enlarge Swapfile
        shell: bash
        run: |
          df -h
          sudo apt clean
          existing_images=$(docker image ls -aq)
          if [[ ${existing_images} != "" ]]; then
             docker rmi ${existing_images}
          fi
          docker container prune -f
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo fallocate -l 16G /swapfile
          sudo chmod 0600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          cat /proc/meminfo
          df -h

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Set Up Environment
        shell: bash
        run: |
          pip install -r requirements.txt

      - name: Configure
        shell: bash
        run: |
          git config --global user.email "dmd_octarine@stsci.edu"
          git config --global user.name "Wrangler workflow"
          scripts/image-configure wrangler --use-frozen 0 --freeze 0 --base-notebook minimal-notebook --repack 1

      - name: Validate Spec
        shell: bash
        run: |
             source setup-env
             NBW_WRANGLER_SPEC=$(find nbw-spec-archive/ -name "*.yaml" -type f | sort | tail -1)
             python -m nb_wrangler ${NBW_WRANGLER_SPEC} --validate --verbose
             cp -v ${NBW_WRANGLER_SPEC} deployments/wrangler/environments/nbw-wrangler-spec.yaml

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image Build
        shell: bash
        run: |
           df -h
           source setup-env
           scripts/image-build
           df -h
           docker system df
           docker system prune
           docker image ls
           df -h

      - name: Image Functional Tests
        shell: bash
        run: |
           df -h
           source setup-env
           scripts/image-test
           df -h

      - name: Image Push
        shell: bash
        run: |
            set -o pipefail
            set -x
            # source setup-env
            df -h
            export NBW_WRANGLER_SPEC=$(find nbw-spec-archive/ -name "*.yaml" -type f | head -1)
            export GITHUB_TAG=$(basename ${NBW_WRANGLER_SPEC} .yaml)
            export BUILT_IMAGE_HASH=$(docker image ls | head -2 | awk '{print $3;}' | tail -1)
            export GITHUB_UNTAGGED_ID=ghcr.io/${{ github.repository }}
            export GITHUB_IMAGE_ID=${GITHUB_UNTAGGED_ID}:${GITHUB_TAG}
            docker tag ${BUILT_IMAGE_HASH} ${GITHUB_IMAGE_ID}
            docker push $GITHUB_IMAGE_ID

       # strictly speaking in prod we shold scan before pushing,  this is for trivy testing
      - name: Run Trivy vulnerability scanner
        shell: bash
        run: |
          source setup-env
          export NBW_WRANGLER_SPEC=$(find nbw-spec-archive/ -name "*.yaml" -type f | head -1)
          export GITHUB_TAG=$(basename ${NBW_WRANGLER_SPEC} .yaml)
          export BUILT_IMAGE_HASH=$(docker image ls | head -2 | awk '{print $3;}' | tail -1)
          export GITHUB_UNTAGGED_ID=ghcr.io/${{ github.repository }}
          export GITHUB_IMAGE_ID=${GITHUB_UNTAGGED_ID}:${GITHUB_TAG}
          docker tag ${BUILT_IMAGE_HASH} ${GITHUB_IMAGE_ID}
          docker push $GITHUB_IMAGE_ID
          image-scan  $GITHUB_IMAGE_ID
