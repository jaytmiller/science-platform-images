#! /usr/bin/env python

import argparse
import re
import shutil


def create_setup_env_file(
    platform, deployment_name, environment, use_frozen, freeze, repack, cal_version, owner,
    base_notebook
):
    shutil.copy("setup-env.template", "setup-env")

    use_frozen = {"floating": "0", "frozen": "1"}.get(use_frozen, use_frozen)

    with open("setup-env", "r") as file:
        content = file.read()

        content = re.sub(
            r"DEPLOYMENT_NAME=.+",
            f"DEPLOYMENT_NAME={deployment_name}",
            content,
        )

        content = re.sub(
            r"PLATFORM=.+",
            f"PLATFORM={platform}",
            content,
        )

        content = re.sub(
            r"ENVIRONMENT=.+",
            f"ENVIRONMENT={environment}",
            content,
        )

        content = re.sub(r"USE_FROZEN=[\d]", f"USE_FROZEN={use_frozen}", content)

        content = re.sub(r"FREEZE=[\d]", f"FREEZE={freeze}", content)

        content = re.sub(r"REPACK=[\d]", f"REPACK={repack}", content)

        content = re.sub(r"CAL_VERSION=.+", f"CAL_VERSION={cal_version}", content)

        content = re.sub(r"OWNER=.+", f"OWNER={owner}", content)
        if owner == "spacetelescope":
            content = re.sub(r"REGISTRY=.+", 'REGISTRY=""', content)
        else:
            content = re.sub(r"REGISTRY=.+", f'REGISTRY="{owner}/"', content)

        content = re.sub(r"BASE_NOTEBOOK=.+", f"BASE_NOTEBOOK={base_notebook}", content)

    with open("setup-env", "w+") as file:
        file.write(content)

    print(content)


def main():
    parser = argparse.ArgumentParser(
        description="Create setup-env file to define image build properties."
    )
    parser.add_argument(
        "deployment",
        choices=["tike", "roman", "jwebbinar", "wrangler"],
        help="The deployment name defining image contents.",
    )
    parser.add_argument(
        "--environment",
        choices=["sandbox", "dev", "test", "prod", "int"],
        default="sandbox",
        help="The deployment name defining image contents.",
    )
    parser.add_argument(
        "--platform",
        choices=["linux/amd64", "linux/aarch64"],
        default="linux/amd64",
        help="The OS/instruction-set for building and running images.",
    )
    parser.add_argument(
        "--use-frozen",
        type=str,
        choices=["0", "1", "floating", "frozen"],
        default="floating",
        help="Use floating (default: 0).",
    )
    parser.add_argument(
        "--freeze",
        type=int,
        default=0,
        choices=[0, 1],
        help="Don't freeze requirements, let them float to highest versions possible (default: 0).",
    )
    parser.add_argument(
        "--repack",
        type=int,
        default=0,
        choices=[0, 1],
        help="Repack the image to reduce size.",
    )
    parser.add_argument(
        "--cal-version",
        default="none",
        help="Calibration s/w version when applicable (default: none).",
    )
    parser.add_argument(
        "--owner",
        type=str,
        default="spacetelescope",
        choices=["spacetelescope", "quay.io/jupyter"],
        help="Repo used to build or pull scipy-notebook image,  spacetelescope(build) or quay.io/jupyter(pull)",
    )
    parser.add_argument(
        "--base-notebook",
        type=str,
        default="scipy-notebook",
        choices=["scipy-notebook", "minimal-notebook", "base-notebook", "pytorch-notebook", "tensorflow-notebook",
                 "julia-notebook", "pyspark-notebook", "r-notebook", "all-spark-notebook"],
        help="Docker-stacks notebook type to build or pull.  scipy-notebook(tike,roman,jwebbinar), minimal-notebook(wrangler)"
    )
    args = parser.parse_args()

    create_setup_env_file(
        args.platform,
        args.deployment,
        args.environment,
        args.use_frozen,
        args.freeze,
        args.repack,
        args.cal_version,
        args.owner,
        args.base_notebook
    )


if __name__ == "__main__":
    main()
