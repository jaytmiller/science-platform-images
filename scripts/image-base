#! /bin/bash

set -eu

echo "========================= Building Base Image ========================"

# These build-args are added to the image environment and will be available in
#   all subsequent builds based on this image.

cd ~
if [[ ! -d docker-stacks ]]; then
    git clone https://github.com/jupyter/docker-stacks.git
    cd docker-stacks
else
    cd docker-stacks
    git fetch origin
    set +e
    git stash
    git checkout origin/main
    git stash pop
    set -e
fi

# checkout the appropriate docker-stacks revision if using frozen specs;
# otherwise, collect and stash revision
env_frozen_dir="${IMAGE_DIR}/env-frozen"
mkdir -p $env_frozen_dir
frozen_hash_spec="$env_frozen_dir/docker-stacks.hash"
if [[ "$USE_FROZEN" == "1" ]]; then
    git checkout `cat $frozen_hash_spec`
else
    if [[ "$FREEZE" == "1" ]]; then
        echo `git rev-parse HEAD` > $frozen_hash_spec
    fi
fi

# Taken from the docker-stacks Makefile to enable adding --build-arg's again
#
# Note that these no longer bother using RUN caching because the docker-stacks
# Dockerfiles nominally do such a good job of cache clearing that there is no effect
# anyway;  the only way for RUN caching to be effective caching between builds\
# is if the "clean" steps are suppressed... which we can only do for our framework.
#
build_jh() {
    STACK=$1;  shift
    docker build ${DOCKER_BUILD_ARGS} \
           -t ${OWNER}/${STACK}:latest \
           ./images/${STACK} \
           --file images/${STACK}/Dockerfile \
           $*
}


build_jh  docker-stacks-foundation  --build-arg ROOT_IMAGE=${ROOT_IMAGE}

build_jh  base-notebook     --build-arg BASE_IMAGE=${OWNER}/docker-stacks-foundation:latest

build_jh  minimal-notebook  --build-arg BASE_IMAGE=${OWNER}/base-notebook:latest

if [[ BASE_NOTEBOOK == "scipy-notebook" ]]; then
    build_jh  scipy-notebook    --build-arg BASE_IMAGE=${OWNER}/minimal-notebook:latest
fi

docker system prune --force
