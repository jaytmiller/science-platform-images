#! /bin/bash

set -eu

cd $JUPYTERHUB_DIR
source setup-env

# Build the combined deployment image,  including:
# 1. Perform any required source code updates,  including updating SSL certs
#    and regenerating any generated Dockerfiles from constituent parts.
# 2. Build the jupyterhub base image, e.g. scipy-notebook on Ubuntu,  including STScI cert
# 3. Build and tag the common image
# 4. Build and tag the combined mission image.
# 5. If operating with USE_FROZEN=0, re-export frozen conda environments
#    as fully versioned conda config files.  These may still need tweaking
#    but form the basis for building frozen environments using USE_FROZEN=1.

time (

# ..................................................................................
# Make automatic source adjustments
image-update


# ..................................................................................
# Build base image, e.g. our version of scipy-notebook including cert handling
if [[ ${OWNER} == "spacetelescope" ]]; then
    image-base
else
    docker pull ${BASE_IMAGE}
fi

function repack {
    image=$1
    if [[ "$REPACK" == "1" ]]; then
        echo "Repacking image to reduce size."
        docker image ls
        repack-image ${image}
        docker image ls
        docker image rm ${image}
        docker tag ${image}-slim ${image}
        docker image rm ${image}-slim
        docker image ls
    fi
}

# ..................................................................................
# Build STScI shared layer for all deployments
cd ${COMMON_IMAGE_DIR}
echo "========================= Building Common Image ========================"
add-caching Dockerfile >Dockerfile.cached
time docker build \
       ${DOCKER_BUILD_ARGS} \
       --tag notebook-common \
       --build-arg BASE_IMAGE=${BASE_IMAGE} \
       --build-arg USE_FROZEN=${USE_FROZEN} \
       --build-arg PIP_SWITCHES="${PIP_SWITCHES}" \
       --build-arg CONDA_VER=${CONDA_VER} \
       --build-arg USER_CACHE_DIRS="${USER_CACHE_DIRS}" \
       --file Dockerfile.cached  .
rm Dockerfile.cached

repack notebook-common

# ..................................................................................
# Build custom layers for this deployment, RUN caching leaves behind cache
# mount points owned by root which must be corrected later so users can still
# use their caches,  hence the tag has a -dirty suffix.

cd ${IMAGE_DIR}
echo "========================= Building $NOTEBOOK_ID USE_FROZEN=${USE_FROZEN} =========================="
add-caching Dockerfile >Dockerfile.cached
time docker build \
     ${DOCKER_BUILD_ARGS} \
     --tag "notebook-${DEPLOYMENT_NAME}-dirty" \
     --build-arg BASE_IMAGE=notebook-common \
     --file Dockerfile.cached .
rm Dockerfile.cached

# ..................................................................................
# In a Dockerfile which is not using RUN cache, touch up all the cache
# directory mount points so they are appropriately owned and writable vs. being
# universally owned by root and unwritable by jovyan / the user.

cd $COMMON_IMAGE_DIR
docker build \
     ${DOCKER_BUILD_ARGS} \
       --tag $NOTEBOOK_ID \
       --build-arg BASE_CONTAINER="notebook-${DEPLOYMENT_NAME}-dirty" \
       --build-arg USER_CACHE_DIRS="${USER_CACHE_DIRS}" \
       --file Dockerfile.cache .

# Once touched up we can discard this to reduce confusion
docker rmi "notebook-${DEPLOYMENT_NAME}-dirty"

repack $NOTEBOOK_ID

# ..................................................................................
# Optionally update requirements used by frozen builds.
# In principle this may shift entirely to CI/CD
if [[ "$FREEZE" == "1" ]]; then
    # Dump out environment/kernel specs which capture as much version
    # information as possible, not yet perfect/complete, may require
    # examination of diffs and manual updates to reject bad changes.
    echo "========================= Freezing Requirements =========================="
    image-freeze
fi

)
